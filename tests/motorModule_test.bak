
#include "motorModule.h"
#include "config.h"

#include <chrono> // For time in ms
#include <thread> // For sleeping
#include <cstdint> // for uint16_t
#include <iostream>
#include <iomanip>
#include "esp_log.h"
#include <cmath>

#define TESTCOUNT 10

extern "C" void app_main(){

    Pca9548aParams pca9548aParams = {I2C_SCL_PIN, I2C_SDA_PIN, PCA9548A_SLAVE_ADDR, I2C_FREQ, I2C_NUM_0};
    PCA9548A pca9548a(pca9548aParams);

    MotorParams params1;
    params1.pca9548a = &pca9548a;
    params1.pca9548aPort = J2S_PORT;
    params1.as5600Config = AS5600_CONF;
    params1.bitMask = J2S_BIT_MASK;
    params1.dirPin = J2S_PIN_DIR;
    params1.stepPin = J2S_PIN_STEP;

    MotorParams params2;
    params2.pca9548a = &pca9548a;
    params2.pca9548aPort = J6S_PORT;
    params2.as5600Config = AS5600_CONF;
    params2.bitMask = J6S_BIT_MASK;
    params2.dirPin = J6S_PIN_DIR;
    params2.stepPin = J6S_PIN_STEP;

    MotorModule motor1(params1);
    MotorModule motor2(params2);

    
    while(true){

        // Start timer
        auto start = std::chrono::high_resolution_clock::now();
        
        float angle = motor2.updateAngle();

        // Stop timer
        auto end = std::chrono::high_resolution_clock::now();

        // Calculate elapsed time in seconds
        auto duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start);

        std::cout << "Time: " << duration.count() << "us" << std::endl;
        std::cout << "Anlge: " << angle << "degrees" << std::endl;

        std::this_thread::sleep_for(std::chrono::milliseconds(50));
    }

}